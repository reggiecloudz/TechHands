{
  "ASYNC_REST_CONTROLLER": {
    "prefix": "asyncrestcontroller",
    "body": [
      "using System;",
      "using System.Collections.Generic;",
      "using System.Linq;",
      "using System.Threading.Tasks;",
      "using Microsoft.AspNetCore.Http;",
      "using Microsoft.AspNetCore.Mvc;",
      "using Microsoft.EntityFrameworkCore;",
      "using ${1:Namespace}.Data;",
      "using ${1:Namespace}.Data.Entities;",
      "",
      "namespace ${1:Namespace}.Controllers",
      "{",
      "    [Route(\"api/[controller]\")]",
      "    [ApiController]",
      "    public class ${2:ModelName}sController : ControllerBase",
      "    {",
      "        private readonly ApplicationDbContext _context;",
      "",
      "        public ${2:ModelName}sController(ApplicationDbContext context)",
      "        {",
      "            _context = context;",
      "        }",
      "",
      "        // GET: api/${2:ModelName}s",
      "        [HttpGet]",
      "        public async Task<ActionResult<IEnumerable<${2:ModelName}>>> Get${2:ModelName}s()",
      "        {",
      "          if (_context.${2:ModelName}s == null)",
      "          {",
      "              return NotFound();",
      "          }",
      "            return await _context.${2:ModelName}s.ToListAsync();",
      "        }",
      "",
      "        // GET: api/${2:ModelName}s/5",
      "        [HttpGet(\"{id}\")]",
      "        public async Task<ActionResult<${2:ModelName}>> Get${2:ModelName}(long id)",
      "        {",
      "          if (_context.${2:ModelName}s == null)",
      "          {",
      "              return NotFound();",
      "          }",
      "            var ${3:VariableName} = await _context.${2:ModelName}s.FindAsync(id);",
      "",
      "            if (${3:VariableName} == null)",
      "            {",
      "                return NotFound();",
      "            }",
      "",
      "            return ${3:VariableName};",
      "        }",
      "",
      "        // PUT: api/${2:ModelName}s/5",
      "        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754",
      "        [HttpPut(\"{id}\")]",
      "        public async Task<IActionResult> Put${2:ModelName}(long id, ${2:ModelName} ${3:VariableName})",
      "        {",
      "            if (id != ${3:VariableName}.Id)",
      "            {",
      "                return BadRequest();",
      "            }",
      "",
      "            _context.Entry(${3:VariableName}).State = EntityState.Modified;",
      "",
      "            try",
      "            {",
      "                await _context.SaveChangesAsync();",
      "            }",
      "            catch (DbUpdateConcurrencyException)",
      "            {",
      "                if (!${2:ModelName}Exists(id))",
      "                {",
      "                    return NotFound();",
      "                }",
      "                else",
      "                {",
      "                    throw;",
      "                }",
      "            }",
      "",
      "            return NoContent();",
      "        }",
      "",
      "        // POST: api/${2:ModelName}s",
      "        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754",
      "        [HttpPost]",
      "        public async Task<ActionResult<${2:ModelName}>> Post${2:ModelName}(${2:ModelName} ${3:VariableName})",
      "        {",
      "          if (_context.${2:ModelName}s == null)",
      "          {",
      "              return Problem(\"Entity set 'ApplicationDbContext.${2:ModelName}s'  is null.\");",
      "          }",
      "            _context.${2:ModelName}s.Add(${3:VariableName});",
      "            await _context.SaveChangesAsync();",
      "",
      "            return CreatedAtAction(\"Get${2:ModelName}\", new { id = ${3:VariableName}.Id }, ${3:VariableName});",
      "        }",
      "",
      "        // DELETE: api/${2:ModelName}s/5",
      "        [HttpDelete(\"{id}\")]",
      "        public async Task<IActionResult> Delete${2:ModelName}(long id)",
      "        {",
      "            if (_context.${2:ModelName}s == null)",
      "            {",
      "                return NotFound();",
      "            }",
      "            var ${3:VariableName} = await _context.${2:ModelName}s.FindAsync(id);",
      "            if (${3:VariableName} == null)",
      "            {",
      "                return NotFound();",
      "            }",
      "",
      "            _context.${2:ModelName}s.Remove(${3:VariableName});",
      "            await _context.SaveChangesAsync();",
      "",
      "            return NoContent();",
      "        }",
      "",
      "        private bool ${2:ModelName}Exists(long id)",
      "        {",
      "            return (_context.${2:ModelName}s?.Any(e => e.Id == id)).GetValueOrDefault();",
      "        }",
      "    }",
      "}",
      ""
    ]
  }
}
